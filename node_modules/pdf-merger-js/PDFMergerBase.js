import { PDFDocument } from 'pdf-lib'

/**
 * @typedef {Object} Metadata
 * @property {string} [producer]
 * @property {string} [author]
 * @property {string} [title]
 * @property {string} [creator]
 */

/**
 * @class PDFMergerBase
 * @classdesc Base class for PDFMerger
 */
export default class PDFMergerBase {
  /**
   * The internal pdf-lib document.
   *
   * @private
   * @type {PDFDocument | undefined}
   */
  #doc = undefined

  constructor () {
    this.reset()

    this.loadOptions = {
      // allow merging of encrypted pdfs (issue #88)
      ignoreEncryption: true
    }
  }

  /**
   * Resets the internal state of the document, to start again.
   *
   * @returns {void}
   */
  reset () {
    this.#doc = undefined
  }

  /**
   * Set the metadata of the merged PDF.
   *
   * @async
   * @param {Metadata} metadata
   * @returns {Promise<void>}
   */
  async setMetadata (metadata) {};

  /**
   * Add pages from a PDF document to the end of the merged document.
   *
   * @async
   * @param {string | Buffer | ArrayBuffer} inputFile a pdf source
   * @param {string | string[] | undefined | null} [pages]
   * @returns {Promise<void>}
   */
  async add (inputFile, pages) {}

  /**
   * Save the merged PDF to a file.
   * In node.js, the file is written to disk.
   * In the browser, a download is started.
   *
   * @async
   * @param {string} fileName
   * @returns {Promise<void>}
   */
  async save (fileName) {}

  /**
   * Return the merged PDF as a Blob.
   *
   * @async
   * @returns {Promise<Blob>}
   */
  async saveAsBlob () {}

  /**
   * Creates a new PDFDocument and sets the metadata
   * if this.#doc does not exist yet
   *
   * @private
   * @async
   * @returns {Promise<void>}
   */
  async #ensureDoc () {
    if (!this.#doc) {
      this.#doc = await PDFDocument.create()
      this.#doc.setProducer('pdf-merger-js')
      this.#doc.setCreationDate(new Date())
    }
  }
}
